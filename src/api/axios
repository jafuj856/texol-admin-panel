import axios from "axios";
import { toast } from "react-toastify";

const customNavigate = (path) => {
  window.location.href = path;
};
const token = localStorage.getItem("token");
const baseURL = import.meta.env.VITE_API_BASE_URL;
// const BASE_URL = "http://localhost:8003/";
const api = axios.create({
  baseURL: baseURL,
  headers: {
    Authorization: `Bearer ${token}`,
  },
});

const handleApiError = (error) => {
  if (error.response) {
    console.error("Data:", error.response.data);
    console.error("Status:", error.response.status);
    console.error("Headers:", error.response.headers);

    if (error.response.data.message === "Not authorized") {
      toast.error(error.response.data.message);
      localStorage.clear();
      customNavigate("/auth");
    } else {
      toast.error(error.response.data.message);
    }
  } else if (error.request) {
    console.error("Request:", error.request);
  } else {
    console.error("Error:", error.message);
  }
  console.error("Config:", error.config);
};

const getAuthToken = () => localStorage.getItem("token");

export const apiService = {
  async get(endpoint, requiresAuth = true) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${getAuthToken()}`,
        },
      };

      const response = await api.get(endpoint, requiresAuth ? config : null);
      return response.data;
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  },

  async post(endpoint, data = {}, requiresAuth = true) {
    try {
      const headers = requiresAuth
        ? { Authorization: `Bearer ${getAuthToken()}` }
        : {};
      const response = await api.post(endpoint, data, { headers });
      return response.data;
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  },
  async put(endpoint, data = {}, requiresAuth = true) {
    if (data instanceof FormData) {
      for (let [key, value] of data.entries()) {
        console.log(key, value);
      }
    } else {
      console.log(data);
    }

    try {
      const headers = requiresAuth
        ? { Authorization: `Bearer ${getAuthToken()}` }
        : {};
      const response = await api.put(endpoint, data, { headers });
      return response.data;
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  },

  async delete(endpoint, data = {}, requiresAuth = true) {
    const token = getAuthToken(); // Use getAuthToken to be consistent with other methods
    console.log("Token in DELETE request:", data);

    try {
      const response = await api.delete(endpoint, data);
      return response.data;
    } catch (error) {
      handleApiError(error);
      throw error;
    }
  },
};

export default api;
